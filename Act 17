using System;
using System.Collections.Generic;
using System.Linq;

class Coupon
{
    public string Code { get; }
    public string Type { get; }
    public decimal Value { get; }

    public Coupon(string code)
    {
        Code = code.ToUpper();
        
        if (code.EndsWith("%"))
        {
            Type = "PERCENT";
            Value = decimal.Parse(code.TrimEnd('%'));
        }
        else if (code.StartsWith("$"))
        {
            Type = "FIXED";
            Value = decimal.Parse(code.Substring(1));
        }
        else if (code.Contains("FREE"))
        {
            Type = "SPECIAL";
            Value = 0;
        }
        else
        {
            throw new ArgumentException("Invalid coupon format");
        }
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("COUPON OPTIMIZER");
        
        Console.Write("Enter cart total: ");
        decimal cartTotal = decimal.Parse(Console.ReadLine());
        
        Console.Write("Enter coupons (comma separated): ");
        List<Coupon> coupons = Console.ReadLine()
            .Split(',')
            .Select(c => c.Trim())
            .Where(c => !string.IsNullOrEmpty(c))
            .Select(c => new Coupon(c))
            .ToList();

        // Find best valid combination
        decimal maxDiscount = 0;
        List<Coupon> bestCombo = new List<Coupon>();

        for (int comboSize = 1; comboSize <= coupons.Count; comboSize++)
        {
            foreach (var combo in GetCombinations(coupons, comboSize))
            {
                if (IsValidCombination(combo))
                {
                    decimal discount = CalculateDiscount(cartTotal, combo);
                    if (discount > maxDiscount)
                    {
                        maxDiscount = discount;
                        bestCombo = combo.ToList();
                    }
                }
            }
        }

        // Display results
        Console.WriteLine("\nBEST COUPON COMBINATION");
        if (bestCombo.Count == 0)
        {
            Console.WriteLine("No valid coupon combinations found.");
            return;
        }

        Console.WriteLine($"Coupons: {string.Join(", ", bestCombo.Select(c => c.Code))}");
        Console.WriteLine($"Discount: {maxDiscount:C}");
        Console.WriteLine($"Final Price: {cartTotal - maxDiscount:C}");
    }

    static IEnumerable<IEnumerable<Coupon>> GetCombinations(List<Coupon> coupons, int length)
    {
        for (int i = 0; i < coupons.Count; i++)
        {
            if (length == 1)
            {
                yield return new List<Coupon> { coupons[i] };
            }
            else
            {
                foreach (var next in GetCombinations(coupons.Skip(i + 1).ToList(), length - 1))
                {
                    yield return new List<Coupon> { coupons[i] }.Concat(next);
                }
            }
        }
    }

    static bool IsValidCombination(IEnumerable<Coupon> combo)
    {
        bool hasPercent = combo.Any(c => c.Type == "PERCENT");
        bool hasFixed = combo.Any(c => c.Type == "FIXED");
        bool hasSpecial = combo.Any(c => c.Type == "SPECIAL");

        // Can't mix percent and fixed discounts
        if (hasPercent && hasFixed) return false;
        
        // Special coupons can't be combined with others
        if (hasSpecial && combo.Count() > 1) return false;
        
        return true;
    }

    static decimal CalculateDiscount(decimal cartTotal, IEnumerable<Coupon> combo)
    {
        decimal discount = 0;
        
        foreach (var coupon in combo)
        {
            switch (coupon.Type)
            {
                case "PERCENT":
                    discount += cartTotal * (coupon.Value / 100);
                    break;
                case "FIXED":
                    discount += coupon.Value;
                    break;
                case "SPECIAL":
                    discount += 15; // Example value for free shipping
                    break;
            }
        }
        
        // Cap discount at 50% of cart total
        return Math.Min(discount, cartTotal * 0.5m);
    }
}
