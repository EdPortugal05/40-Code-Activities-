using System;
using System.Collections.Generic;
using System.Linq;

class Asset
{
    public string Currency { get; set; }
    public decimal Amount { get; set; }
    public decimal ValueInUSD { get; set; }
}

class ExchangeRate
{
    public DateTime Date { get; set; }
    public string Currency { get; set; }
    public decimal Rate { get; set; }
}

class PortfolioEvaluator
{
    private List<ExchangeRate> _exchangeRates;
    private DateTime _valuationDate;

    public PortfolioEvaluator(List<ExchangeRate> exchangeRates, DateTime valuationDate)
    {
        _exchangeRates = exchangeRates;
        _valuationDate = valuationDate;
    }

    public List<Asset> Evaluate(List<Asset> portfolio)
    {
        foreach (var asset in portfolio)
        {
            var rate = _exchangeRates
                .Where(r => r.Currency == asset.Currency && r.Date <= _valuationDate)
                .OrderByDescending(r => r.Date)
                .FirstOrDefault();
            
            if (rate == null)
                throw new Exception($"No exchange rate found for {asset.Currency}");
            
            if ((_valuationDate - rate.Date).TotalDays > 7)
                Console.WriteLine($"Warning: Stale rate for {asset.Currency} ({rate.Date:yyyy-MM-dd})");
            
            asset.ValueInUSD = asset.Amount * rate.Rate;
        }

        return portfolio.OrderByDescending(a => a.ValueInUSD).ToList();
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("PORTFOLIO EVALUATOR");
        
        // Load assets
        List<Asset> portfolio = new List<Asset>();
        Console.Write("Number of assets: ");
        int assetCount = int.Parse(Console.ReadLine());

        for (int i = 0; i < assetCount; i++)
        {
            Console.WriteLine($"\nAsset #{i + 1}");
            var asset = new Asset();
            
            Console.Write("Currency: ");
            asset.Currency = Console.ReadLine().ToUpper();
            
            Console.Write("Amount: ");
            asset.Amount = decimal.Parse(Console.ReadLine());
            
            portfolio.Add(asset);
        }

        // Load exchange rates
        List<ExchangeRate> rates = new List<ExchangeRate>();
        Console.Write("\nNumber of exchange rates: ");
        int rateCount = int.Parse(Console.ReadLine());

        for (int i = 0; i < rateCount; i++)
        {
            Console.WriteLine($"\nExchange Rate #{i + 1}");
            var rate = new ExchangeRate();
            
            Console.Write("Date (yyyy-mm-dd): ");
            rate.Date = DateTime.Parse(Console.ReadLine());
            
            Console.Write("Currency: ");
            rate.Currency = Console.ReadLine().ToUpper();
            
            Console.Write("Rate (1 foreign currency in USD): ");
            rate.Rate = decimal.Parse(Console.ReadLine());
            
            rates.Add(rate);
        }

        // Get valuation date
        Console.Write("\nValuation date (yyyy-mm-dd): ");
        DateTime valuationDate = DateTime.Parse(Console.ReadLine());

        // Evaluate portfolio
        try
        {
            var evaluator = new PortfolioEvaluator(rates, valuationDate);
            var evaluatedPortfolio = evaluator.Evaluate(portfolio);

            Console.WriteLine("\nPORTFOLIO VALUATION");
            Console.WriteLine($"As of {valuationDate:yyyy-MM-dd}");
            Console.WriteLine("Currency\tAmount\tRate\t\tValue (USD)");
            Console.WriteLine("--------\t------\t----\t\t-----------");
            
            decimal total = 0;
            foreach (var asset in evaluatedPortfolio)
            {
                decimal rate = asset.ValueInUSD / asset.Amount;
                Console.WriteLine($"{asset.Currency}\t\t{asset.Amount}\t{rate:F4}\t\t{asset.ValueInUSD:C}");
                total += asset.ValueInUSD;
            }

            Console.WriteLine($"\nTOTAL PORTFOLIO VALUE: {total:C}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
